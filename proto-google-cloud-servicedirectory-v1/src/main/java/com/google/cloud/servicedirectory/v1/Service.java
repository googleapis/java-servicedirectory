/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/servicedirectory/v1/service.proto

package com.google.cloud.servicedirectory.v1;

/**
 *
 *
 * <pre>
 * An individual service. A service contains a name and optional metadata.
 * A service must exist before
 * [endpoints][google.cloud.servicedirectory.v1.Endpoint] can be
 * added to it.
 * </pre>
 *
 * Protobuf type {@code google.cloud.servicedirectory.v1.Service}
 */
public final class Service extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.servicedirectory.v1.Service)
    ServiceOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use Service.newBuilder() to construct.
  private Service(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private Service() {
    name_ = "";
    endpoints_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new Service();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  private Service(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10:
            {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
          case 26:
            {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                endpoints_ =
                    new java.util.ArrayList<com.google.cloud.servicedirectory.v1.Endpoint>();
                mutable_bitField0_ |= 0x00000002;
              }
              endpoints_.add(
                  input.readMessage(
                      com.google.cloud.servicedirectory.v1.Endpoint.parser(), extensionRegistry));
              break;
            }
          case 34:
            {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                annotations_ =
                    com.google.protobuf.MapField.newMapField(
                        AnnotationsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String> annotations__ =
                  input.readMessage(
                      AnnotationsDefaultEntryHolder.defaultEntry.getParserForType(),
                      extensionRegistry);
              annotations_.getMutableMap().put(annotations__.getKey(), annotations__.getValue());
              break;
            }
          default:
            {
              if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        endpoints_ = java.util.Collections.unmodifiableList(endpoints_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.servicedirectory.v1.ServiceProto
        .internal_static_google_cloud_servicedirectory_v1_Service_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(int number) {
    switch (number) {
      case 4:
        return internalGetAnnotations();
      default:
        throw new RuntimeException("Invalid map field number: " + number);
    }
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.servicedirectory.v1.ServiceProto
        .internal_static_google_cloud_servicedirectory_v1_Service_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.servicedirectory.v1.Service.class,
            com.google.cloud.servicedirectory.v1.Service.Builder.class);
  }

  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   *
   *
   * <pre>
   * Immutable. The resource name for the service in the format
   * 'projects/&#42;&#47;locations/&#42;&#47;namespaces/&#42;&#47;services/&#42;'.
   * </pre>
   *
   * <code>string name = 1 [(.google.api.field_behavior) = IMMUTABLE];</code>
   *
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Immutable. The resource name for the service in the format
   * 'projects/&#42;&#47;locations/&#42;&#47;namespaces/&#42;&#47;services/&#42;'.
   * </pre>
   *
   * <code>string name = 1 [(.google.api.field_behavior) = IMMUTABLE];</code>
   *
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ANNOTATIONS_FIELD_NUMBER = 4;

  private static final class AnnotationsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<java.lang.String, java.lang.String> defaultEntry =
        com.google.protobuf.MapEntry.<java.lang.String, java.lang.String>newDefaultInstance(
            com.google.cloud.servicedirectory.v1.ServiceProto
                .internal_static_google_cloud_servicedirectory_v1_Service_AnnotationsEntry_descriptor,
            com.google.protobuf.WireFormat.FieldType.STRING,
            "",
            com.google.protobuf.WireFormat.FieldType.STRING,
            "");
  }

  private com.google.protobuf.MapField<java.lang.String, java.lang.String> annotations_;

  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetAnnotations() {
    if (annotations_ == null) {
      return com.google.protobuf.MapField.emptyMapField(AnnotationsDefaultEntryHolder.defaultEntry);
    }
    return annotations_;
  }

  public int getAnnotationsCount() {
    return internalGetAnnotations().getMap().size();
  }
  /**
   *
   *
   * <pre>
   * Optional. Annotations for the service. This data can be consumed by service
   * clients.
   * Restrictions:
   *  - The entire annotations dictionary may contain up to 2000 characters,
   *    spread accoss all key-value pairs. Annotations that goes beyond any
   *    these limits will be rejected.
   *  - Valid annotation keys have two segments: an optional prefix and name,
   *    separated by a slash (/). The name segment is required and must be 63
   *    characters or less, beginning and ending with an alphanumeric character
   *    ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and
   *    alphanumerics between. The prefix is optional. If specified, the prefix
   *    must be a DNS subdomain: a series of DNS labels separated by dots (.),
   *    not longer than 253 characters in total, followed by a slash (/).
   *    Annotations that fails to meet these requirements will be rejected.
   *  - The '(*.)google.com/' and '(*.)googleapis.com/' prefixes are reserved
   *    for system annotations managed by Service Directory. If the user tries
   *    to write to these keyspaces, those entries will be silently ignored by
   *    the system.
   * Note: This field is equivalent to the 'metadata' field in the v1beta1 API.
   * They have the same syntax and read/write to the same location in Service
   * Directory.
   * </pre>
   *
   * <code>map&lt;string, string&gt; annotations = 4 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public boolean containsAnnotations(java.lang.String key) {
    if (key == null) {
      throw new java.lang.NullPointerException();
    }
    return internalGetAnnotations().getMap().containsKey(key);
  }
  /** Use {@link #getAnnotationsMap()} instead. */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getAnnotations() {
    return getAnnotationsMap();
  }
  /**
   *
   *
   * <pre>
   * Optional. Annotations for the service. This data can be consumed by service
   * clients.
   * Restrictions:
   *  - The entire annotations dictionary may contain up to 2000 characters,
   *    spread accoss all key-value pairs. Annotations that goes beyond any
   *    these limits will be rejected.
   *  - Valid annotation keys have two segments: an optional prefix and name,
   *    separated by a slash (/). The name segment is required and must be 63
   *    characters or less, beginning and ending with an alphanumeric character
   *    ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and
   *    alphanumerics between. The prefix is optional. If specified, the prefix
   *    must be a DNS subdomain: a series of DNS labels separated by dots (.),
   *    not longer than 253 characters in total, followed by a slash (/).
   *    Annotations that fails to meet these requirements will be rejected.
   *  - The '(*.)google.com/' and '(*.)googleapis.com/' prefixes are reserved
   *    for system annotations managed by Service Directory. If the user tries
   *    to write to these keyspaces, those entries will be silently ignored by
   *    the system.
   * Note: This field is equivalent to the 'metadata' field in the v1beta1 API.
   * They have the same syntax and read/write to the same location in Service
   * Directory.
   * </pre>
   *
   * <code>map&lt;string, string&gt; annotations = 4 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, java.lang.String> getAnnotationsMap() {
    return internalGetAnnotations().getMap();
  }
  /**
   *
   *
   * <pre>
   * Optional. Annotations for the service. This data can be consumed by service
   * clients.
   * Restrictions:
   *  - The entire annotations dictionary may contain up to 2000 characters,
   *    spread accoss all key-value pairs. Annotations that goes beyond any
   *    these limits will be rejected.
   *  - Valid annotation keys have two segments: an optional prefix and name,
   *    separated by a slash (/). The name segment is required and must be 63
   *    characters or less, beginning and ending with an alphanumeric character
   *    ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and
   *    alphanumerics between. The prefix is optional. If specified, the prefix
   *    must be a DNS subdomain: a series of DNS labels separated by dots (.),
   *    not longer than 253 characters in total, followed by a slash (/).
   *    Annotations that fails to meet these requirements will be rejected.
   *  - The '(*.)google.com/' and '(*.)googleapis.com/' prefixes are reserved
   *    for system annotations managed by Service Directory. If the user tries
   *    to write to these keyspaces, those entries will be silently ignored by
   *    the system.
   * Note: This field is equivalent to the 'metadata' field in the v1beta1 API.
   * They have the same syntax and read/write to the same location in Service
   * Directory.
   * </pre>
   *
   * <code>map&lt;string, string&gt; annotations = 4 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public java.lang.String getAnnotationsOrDefault(
      java.lang.String key, java.lang.String defaultValue) {
    if (key == null) {
      throw new java.lang.NullPointerException();
    }
    java.util.Map<java.lang.String, java.lang.String> map = internalGetAnnotations().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   *
   *
   * <pre>
   * Optional. Annotations for the service. This data can be consumed by service
   * clients.
   * Restrictions:
   *  - The entire annotations dictionary may contain up to 2000 characters,
   *    spread accoss all key-value pairs. Annotations that goes beyond any
   *    these limits will be rejected.
   *  - Valid annotation keys have two segments: an optional prefix and name,
   *    separated by a slash (/). The name segment is required and must be 63
   *    characters or less, beginning and ending with an alphanumeric character
   *    ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and
   *    alphanumerics between. The prefix is optional. If specified, the prefix
   *    must be a DNS subdomain: a series of DNS labels separated by dots (.),
   *    not longer than 253 characters in total, followed by a slash (/).
   *    Annotations that fails to meet these requirements will be rejected.
   *  - The '(*.)google.com/' and '(*.)googleapis.com/' prefixes are reserved
   *    for system annotations managed by Service Directory. If the user tries
   *    to write to these keyspaces, those entries will be silently ignored by
   *    the system.
   * Note: This field is equivalent to the 'metadata' field in the v1beta1 API.
   * They have the same syntax and read/write to the same location in Service
   * Directory.
   * </pre>
   *
   * <code>map&lt;string, string&gt; annotations = 4 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  @java.lang.Override
  public java.lang.String getAnnotationsOrThrow(java.lang.String key) {
    if (key == null) {
      throw new java.lang.NullPointerException();
    }
    java.util.Map<java.lang.String, java.lang.String> map = internalGetAnnotations().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int ENDPOINTS_FIELD_NUMBER = 3;
  private java.util.List<com.google.cloud.servicedirectory.v1.Endpoint> endpoints_;
  /**
   *
   *
   * <pre>
   * Output only. Endpoints associated with this service. Returned on
   * LookupService.Resolve. Control plane clients should use
   * RegistrationService.ListEndpoints.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.servicedirectory.v1.Endpoint> getEndpointsList() {
    return endpoints_;
  }
  /**
   *
   *
   * <pre>
   * Output only. Endpoints associated with this service. Returned on
   * LookupService.Resolve. Control plane clients should use
   * RegistrationService.ListEndpoints.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.servicedirectory.v1.EndpointOrBuilder>
      getEndpointsOrBuilderList() {
    return endpoints_;
  }
  /**
   *
   *
   * <pre>
   * Output only. Endpoints associated with this service. Returned on
   * LookupService.Resolve. Control plane clients should use
   * RegistrationService.ListEndpoints.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   */
  @java.lang.Override
  public int getEndpointsCount() {
    return endpoints_.size();
  }
  /**
   *
   *
   * <pre>
   * Output only. Endpoints associated with this service. Returned on
   * LookupService.Resolve. Control plane clients should use
   * RegistrationService.ListEndpoints.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.servicedirectory.v1.Endpoint getEndpoints(int index) {
    return endpoints_.get(index);
  }
  /**
   *
   *
   * <pre>
   * Output only. Endpoints associated with this service. Returned on
   * LookupService.Resolve. Control plane clients should use
   * RegistrationService.ListEndpoints.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.servicedirectory.v1.EndpointOrBuilder getEndpointsOrBuilder(int index) {
    return endpoints_.get(index);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    for (int i = 0; i < endpoints_.size(); i++) {
      output.writeMessage(3, endpoints_.get(i));
    }
    com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(
        output, internalGetAnnotations(), AnnotationsDefaultEntryHolder.defaultEntry, 4);
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    for (int i = 0; i < endpoints_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, endpoints_.get(i));
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry :
        internalGetAnnotations().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String> annotations__ =
          AnnotationsDefaultEntryHolder.defaultEntry
              .newBuilderForType()
              .setKey(entry.getKey())
              .setValue(entry.getValue())
              .build();
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, annotations__);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.servicedirectory.v1.Service)) {
      return super.equals(obj);
    }
    com.google.cloud.servicedirectory.v1.Service other =
        (com.google.cloud.servicedirectory.v1.Service) obj;

    if (!getName().equals(other.getName())) return false;
    if (!internalGetAnnotations().equals(other.internalGetAnnotations())) return false;
    if (!getEndpointsList().equals(other.getEndpointsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    if (!internalGetAnnotations().getMap().isEmpty()) {
      hash = (37 * hash) + ANNOTATIONS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetAnnotations().hashCode();
    }
    if (getEndpointsCount() > 0) {
      hash = (37 * hash) + ENDPOINTS_FIELD_NUMBER;
      hash = (53 * hash) + getEndpointsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.servicedirectory.v1.Service parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.servicedirectory.v1.Service parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.servicedirectory.v1.Service parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.servicedirectory.v1.Service parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.servicedirectory.v1.Service parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.servicedirectory.v1.Service parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.servicedirectory.v1.Service parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.servicedirectory.v1.Service parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.servicedirectory.v1.Service parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.servicedirectory.v1.Service parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.servicedirectory.v1.Service parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.servicedirectory.v1.Service parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.cloud.servicedirectory.v1.Service prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * An individual service. A service contains a name and optional metadata.
   * A service must exist before
   * [endpoints][google.cloud.servicedirectory.v1.Endpoint] can be
   * added to it.
   * </pre>
   *
   * Protobuf type {@code google.cloud.servicedirectory.v1.Service}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.servicedirectory.v1.Service)
      com.google.cloud.servicedirectory.v1.ServiceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.servicedirectory.v1.ServiceProto
          .internal_static_google_cloud_servicedirectory_v1_Service_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(int number) {
      switch (number) {
        case 4:
          return internalGetAnnotations();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(int number) {
      switch (number) {
        case 4:
          return internalGetMutableAnnotations();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.servicedirectory.v1.ServiceProto
          .internal_static_google_cloud_servicedirectory_v1_Service_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.servicedirectory.v1.Service.class,
              com.google.cloud.servicedirectory.v1.Service.Builder.class);
    }

    // Construct using com.google.cloud.servicedirectory.v1.Service.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getEndpointsFieldBuilder();
      }
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      name_ = "";

      internalGetMutableAnnotations().clear();
      if (endpointsBuilder_ == null) {
        endpoints_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        endpointsBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.servicedirectory.v1.ServiceProto
          .internal_static_google_cloud_servicedirectory_v1_Service_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.servicedirectory.v1.Service getDefaultInstanceForType() {
      return com.google.cloud.servicedirectory.v1.Service.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.servicedirectory.v1.Service build() {
      com.google.cloud.servicedirectory.v1.Service result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.servicedirectory.v1.Service buildPartial() {
      com.google.cloud.servicedirectory.v1.Service result =
          new com.google.cloud.servicedirectory.v1.Service(this);
      int from_bitField0_ = bitField0_;
      result.name_ = name_;
      result.annotations_ = internalGetAnnotations();
      result.annotations_.makeImmutable();
      if (endpointsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          endpoints_ = java.util.Collections.unmodifiableList(endpoints_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.endpoints_ = endpoints_;
      } else {
        result.endpoints_ = endpointsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.servicedirectory.v1.Service) {
        return mergeFrom((com.google.cloud.servicedirectory.v1.Service) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.servicedirectory.v1.Service other) {
      if (other == com.google.cloud.servicedirectory.v1.Service.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      internalGetMutableAnnotations().mergeFrom(other.internalGetAnnotations());
      if (endpointsBuilder_ == null) {
        if (!other.endpoints_.isEmpty()) {
          if (endpoints_.isEmpty()) {
            endpoints_ = other.endpoints_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureEndpointsIsMutable();
            endpoints_.addAll(other.endpoints_);
          }
          onChanged();
        }
      } else {
        if (!other.endpoints_.isEmpty()) {
          if (endpointsBuilder_.isEmpty()) {
            endpointsBuilder_.dispose();
            endpointsBuilder_ = null;
            endpoints_ = other.endpoints_;
            bitField0_ = (bitField0_ & ~0x00000002);
            endpointsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getEndpointsFieldBuilder()
                    : null;
          } else {
            endpointsBuilder_.addAllMessages(other.endpoints_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.cloud.servicedirectory.v1.Service parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.cloud.servicedirectory.v1.Service) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     *
     *
     * <pre>
     * Immutable. The resource name for the service in the format
     * 'projects/&#42;&#47;locations/&#42;&#47;namespaces/&#42;&#47;services/&#42;'.
     * </pre>
     *
     * <code>string name = 1 [(.google.api.field_behavior) = IMMUTABLE];</code>
     *
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Immutable. The resource name for the service in the format
     * 'projects/&#42;&#47;locations/&#42;&#47;namespaces/&#42;&#47;services/&#42;'.
     * </pre>
     *
     * <code>string name = 1 [(.google.api.field_behavior) = IMMUTABLE];</code>
     *
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Immutable. The resource name for the service in the format
     * 'projects/&#42;&#47;locations/&#42;&#47;namespaces/&#42;&#47;services/&#42;'.
     * </pre>
     *
     * <code>string name = 1 [(.google.api.field_behavior) = IMMUTABLE];</code>
     *
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      name_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Immutable. The resource name for the service in the format
     * 'projects/&#42;&#47;locations/&#42;&#47;namespaces/&#42;&#47;services/&#42;'.
     * </pre>
     *
     * <code>string name = 1 [(.google.api.field_behavior) = IMMUTABLE];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearName() {

      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Immutable. The resource name for the service in the format
     * 'projects/&#42;&#47;locations/&#42;&#47;namespaces/&#42;&#47;services/&#42;'.
     * </pre>
     *
     * <code>string name = 1 [(.google.api.field_behavior) = IMMUTABLE];</code>
     *
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      name_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<java.lang.String, java.lang.String> annotations_;

    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetAnnotations() {
      if (annotations_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            AnnotationsDefaultEntryHolder.defaultEntry);
      }
      return annotations_;
    }

    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetMutableAnnotations() {
      onChanged();
      ;
      if (annotations_ == null) {
        annotations_ =
            com.google.protobuf.MapField.newMapField(AnnotationsDefaultEntryHolder.defaultEntry);
      }
      if (!annotations_.isMutable()) {
        annotations_ = annotations_.copy();
      }
      return annotations_;
    }

    public int getAnnotationsCount() {
      return internalGetAnnotations().getMap().size();
    }
    /**
     *
     *
     * <pre>
     * Optional. Annotations for the service. This data can be consumed by service
     * clients.
     * Restrictions:
     *  - The entire annotations dictionary may contain up to 2000 characters,
     *    spread accoss all key-value pairs. Annotations that goes beyond any
     *    these limits will be rejected.
     *  - Valid annotation keys have two segments: an optional prefix and name,
     *    separated by a slash (/). The name segment is required and must be 63
     *    characters or less, beginning and ending with an alphanumeric character
     *    ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and
     *    alphanumerics between. The prefix is optional. If specified, the prefix
     *    must be a DNS subdomain: a series of DNS labels separated by dots (.),
     *    not longer than 253 characters in total, followed by a slash (/).
     *    Annotations that fails to meet these requirements will be rejected.
     *  - The '(*.)google.com/' and '(*.)googleapis.com/' prefixes are reserved
     *    for system annotations managed by Service Directory. If the user tries
     *    to write to these keyspaces, those entries will be silently ignored by
     *    the system.
     * Note: This field is equivalent to the 'metadata' field in the v1beta1 API.
     * They have the same syntax and read/write to the same location in Service
     * Directory.
     * </pre>
     *
     * <code>map&lt;string, string&gt; annotations = 4 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    @java.lang.Override
    public boolean containsAnnotations(java.lang.String key) {
      if (key == null) {
        throw new java.lang.NullPointerException();
      }
      return internalGetAnnotations().getMap().containsKey(key);
    }
    /** Use {@link #getAnnotationsMap()} instead. */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getAnnotations() {
      return getAnnotationsMap();
    }
    /**
     *
     *
     * <pre>
     * Optional. Annotations for the service. This data can be consumed by service
     * clients.
     * Restrictions:
     *  - The entire annotations dictionary may contain up to 2000 characters,
     *    spread accoss all key-value pairs. Annotations that goes beyond any
     *    these limits will be rejected.
     *  - Valid annotation keys have two segments: an optional prefix and name,
     *    separated by a slash (/). The name segment is required and must be 63
     *    characters or less, beginning and ending with an alphanumeric character
     *    ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and
     *    alphanumerics between. The prefix is optional. If specified, the prefix
     *    must be a DNS subdomain: a series of DNS labels separated by dots (.),
     *    not longer than 253 characters in total, followed by a slash (/).
     *    Annotations that fails to meet these requirements will be rejected.
     *  - The '(*.)google.com/' and '(*.)googleapis.com/' prefixes are reserved
     *    for system annotations managed by Service Directory. If the user tries
     *    to write to these keyspaces, those entries will be silently ignored by
     *    the system.
     * Note: This field is equivalent to the 'metadata' field in the v1beta1 API.
     * They have the same syntax and read/write to the same location in Service
     * Directory.
     * </pre>
     *
     * <code>map&lt;string, string&gt; annotations = 4 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getAnnotationsMap() {
      return internalGetAnnotations().getMap();
    }
    /**
     *
     *
     * <pre>
     * Optional. Annotations for the service. This data can be consumed by service
     * clients.
     * Restrictions:
     *  - The entire annotations dictionary may contain up to 2000 characters,
     *    spread accoss all key-value pairs. Annotations that goes beyond any
     *    these limits will be rejected.
     *  - Valid annotation keys have two segments: an optional prefix and name,
     *    separated by a slash (/). The name segment is required and must be 63
     *    characters or less, beginning and ending with an alphanumeric character
     *    ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and
     *    alphanumerics between. The prefix is optional. If specified, the prefix
     *    must be a DNS subdomain: a series of DNS labels separated by dots (.),
     *    not longer than 253 characters in total, followed by a slash (/).
     *    Annotations that fails to meet these requirements will be rejected.
     *  - The '(*.)google.com/' and '(*.)googleapis.com/' prefixes are reserved
     *    for system annotations managed by Service Directory. If the user tries
     *    to write to these keyspaces, those entries will be silently ignored by
     *    the system.
     * Note: This field is equivalent to the 'metadata' field in the v1beta1 API.
     * They have the same syntax and read/write to the same location in Service
     * Directory.
     * </pre>
     *
     * <code>map&lt;string, string&gt; annotations = 4 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    @java.lang.Override
    public java.lang.String getAnnotationsOrDefault(
        java.lang.String key, java.lang.String defaultValue) {
      if (key == null) {
        throw new java.lang.NullPointerException();
      }
      java.util.Map<java.lang.String, java.lang.String> map = internalGetAnnotations().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     *
     *
     * <pre>
     * Optional. Annotations for the service. This data can be consumed by service
     * clients.
     * Restrictions:
     *  - The entire annotations dictionary may contain up to 2000 characters,
     *    spread accoss all key-value pairs. Annotations that goes beyond any
     *    these limits will be rejected.
     *  - Valid annotation keys have two segments: an optional prefix and name,
     *    separated by a slash (/). The name segment is required and must be 63
     *    characters or less, beginning and ending with an alphanumeric character
     *    ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and
     *    alphanumerics between. The prefix is optional. If specified, the prefix
     *    must be a DNS subdomain: a series of DNS labels separated by dots (.),
     *    not longer than 253 characters in total, followed by a slash (/).
     *    Annotations that fails to meet these requirements will be rejected.
     *  - The '(*.)google.com/' and '(*.)googleapis.com/' prefixes are reserved
     *    for system annotations managed by Service Directory. If the user tries
     *    to write to these keyspaces, those entries will be silently ignored by
     *    the system.
     * Note: This field is equivalent to the 'metadata' field in the v1beta1 API.
     * They have the same syntax and read/write to the same location in Service
     * Directory.
     * </pre>
     *
     * <code>map&lt;string, string&gt; annotations = 4 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    @java.lang.Override
    public java.lang.String getAnnotationsOrThrow(java.lang.String key) {
      if (key == null) {
        throw new java.lang.NullPointerException();
      }
      java.util.Map<java.lang.String, java.lang.String> map = internalGetAnnotations().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearAnnotations() {
      internalGetMutableAnnotations().getMutableMap().clear();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Annotations for the service. This data can be consumed by service
     * clients.
     * Restrictions:
     *  - The entire annotations dictionary may contain up to 2000 characters,
     *    spread accoss all key-value pairs. Annotations that goes beyond any
     *    these limits will be rejected.
     *  - Valid annotation keys have two segments: an optional prefix and name,
     *    separated by a slash (/). The name segment is required and must be 63
     *    characters or less, beginning and ending with an alphanumeric character
     *    ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and
     *    alphanumerics between. The prefix is optional. If specified, the prefix
     *    must be a DNS subdomain: a series of DNS labels separated by dots (.),
     *    not longer than 253 characters in total, followed by a slash (/).
     *    Annotations that fails to meet these requirements will be rejected.
     *  - The '(*.)google.com/' and '(*.)googleapis.com/' prefixes are reserved
     *    for system annotations managed by Service Directory. If the user tries
     *    to write to these keyspaces, those entries will be silently ignored by
     *    the system.
     * Note: This field is equivalent to the 'metadata' field in the v1beta1 API.
     * They have the same syntax and read/write to the same location in Service
     * Directory.
     * </pre>
     *
     * <code>map&lt;string, string&gt; annotations = 4 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder removeAnnotations(java.lang.String key) {
      if (key == null) {
        throw new java.lang.NullPointerException();
      }
      internalGetMutableAnnotations().getMutableMap().remove(key);
      return this;
    }
    /** Use alternate mutation accessors instead. */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMutableAnnotations() {
      return internalGetMutableAnnotations().getMutableMap();
    }
    /**
     *
     *
     * <pre>
     * Optional. Annotations for the service. This data can be consumed by service
     * clients.
     * Restrictions:
     *  - The entire annotations dictionary may contain up to 2000 characters,
     *    spread accoss all key-value pairs. Annotations that goes beyond any
     *    these limits will be rejected.
     *  - Valid annotation keys have two segments: an optional prefix and name,
     *    separated by a slash (/). The name segment is required and must be 63
     *    characters or less, beginning and ending with an alphanumeric character
     *    ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and
     *    alphanumerics between. The prefix is optional. If specified, the prefix
     *    must be a DNS subdomain: a series of DNS labels separated by dots (.),
     *    not longer than 253 characters in total, followed by a slash (/).
     *    Annotations that fails to meet these requirements will be rejected.
     *  - The '(*.)google.com/' and '(*.)googleapis.com/' prefixes are reserved
     *    for system annotations managed by Service Directory. If the user tries
     *    to write to these keyspaces, those entries will be silently ignored by
     *    the system.
     * Note: This field is equivalent to the 'metadata' field in the v1beta1 API.
     * They have the same syntax and read/write to the same location in Service
     * Directory.
     * </pre>
     *
     * <code>map&lt;string, string&gt; annotations = 4 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder putAnnotations(java.lang.String key, java.lang.String value) {
      if (key == null) {
        throw new java.lang.NullPointerException();
      }
      if (value == null) {
        throw new java.lang.NullPointerException();
      }
      internalGetMutableAnnotations().getMutableMap().put(key, value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. Annotations for the service. This data can be consumed by service
     * clients.
     * Restrictions:
     *  - The entire annotations dictionary may contain up to 2000 characters,
     *    spread accoss all key-value pairs. Annotations that goes beyond any
     *    these limits will be rejected.
     *  - Valid annotation keys have two segments: an optional prefix and name,
     *    separated by a slash (/). The name segment is required and must be 63
     *    characters or less, beginning and ending with an alphanumeric character
     *    ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and
     *    alphanumerics between. The prefix is optional. If specified, the prefix
     *    must be a DNS subdomain: a series of DNS labels separated by dots (.),
     *    not longer than 253 characters in total, followed by a slash (/).
     *    Annotations that fails to meet these requirements will be rejected.
     *  - The '(*.)google.com/' and '(*.)googleapis.com/' prefixes are reserved
     *    for system annotations managed by Service Directory. If the user tries
     *    to write to these keyspaces, those entries will be silently ignored by
     *    the system.
     * Note: This field is equivalent to the 'metadata' field in the v1beta1 API.
     * They have the same syntax and read/write to the same location in Service
     * Directory.
     * </pre>
     *
     * <code>map&lt;string, string&gt; annotations = 4 [(.google.api.field_behavior) = OPTIONAL];
     * </code>
     */
    public Builder putAllAnnotations(java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableAnnotations().getMutableMap().putAll(values);
      return this;
    }

    private java.util.List<com.google.cloud.servicedirectory.v1.Endpoint> endpoints_ =
        java.util.Collections.emptyList();

    private void ensureEndpointsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        endpoints_ =
            new java.util.ArrayList<com.google.cloud.servicedirectory.v1.Endpoint>(endpoints_);
        bitField0_ |= 0x00000002;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.servicedirectory.v1.Endpoint,
            com.google.cloud.servicedirectory.v1.Endpoint.Builder,
            com.google.cloud.servicedirectory.v1.EndpointOrBuilder>
        endpointsBuilder_;

    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public java.util.List<com.google.cloud.servicedirectory.v1.Endpoint> getEndpointsList() {
      if (endpointsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(endpoints_);
      } else {
        return endpointsBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public int getEndpointsCount() {
      if (endpointsBuilder_ == null) {
        return endpoints_.size();
      } else {
        return endpointsBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public com.google.cloud.servicedirectory.v1.Endpoint getEndpoints(int index) {
      if (endpointsBuilder_ == null) {
        return endpoints_.get(index);
      } else {
        return endpointsBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public Builder setEndpoints(int index, com.google.cloud.servicedirectory.v1.Endpoint value) {
      if (endpointsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEndpointsIsMutable();
        endpoints_.set(index, value);
        onChanged();
      } else {
        endpointsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public Builder setEndpoints(
        int index, com.google.cloud.servicedirectory.v1.Endpoint.Builder builderForValue) {
      if (endpointsBuilder_ == null) {
        ensureEndpointsIsMutable();
        endpoints_.set(index, builderForValue.build());
        onChanged();
      } else {
        endpointsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public Builder addEndpoints(com.google.cloud.servicedirectory.v1.Endpoint value) {
      if (endpointsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEndpointsIsMutable();
        endpoints_.add(value);
        onChanged();
      } else {
        endpointsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public Builder addEndpoints(int index, com.google.cloud.servicedirectory.v1.Endpoint value) {
      if (endpointsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEndpointsIsMutable();
        endpoints_.add(index, value);
        onChanged();
      } else {
        endpointsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public Builder addEndpoints(
        com.google.cloud.servicedirectory.v1.Endpoint.Builder builderForValue) {
      if (endpointsBuilder_ == null) {
        ensureEndpointsIsMutable();
        endpoints_.add(builderForValue.build());
        onChanged();
      } else {
        endpointsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public Builder addEndpoints(
        int index, com.google.cloud.servicedirectory.v1.Endpoint.Builder builderForValue) {
      if (endpointsBuilder_ == null) {
        ensureEndpointsIsMutable();
        endpoints_.add(index, builderForValue.build());
        onChanged();
      } else {
        endpointsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public Builder addAllEndpoints(
        java.lang.Iterable<? extends com.google.cloud.servicedirectory.v1.Endpoint> values) {
      if (endpointsBuilder_ == null) {
        ensureEndpointsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, endpoints_);
        onChanged();
      } else {
        endpointsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public Builder clearEndpoints() {
      if (endpointsBuilder_ == null) {
        endpoints_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        endpointsBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public Builder removeEndpoints(int index) {
      if (endpointsBuilder_ == null) {
        ensureEndpointsIsMutable();
        endpoints_.remove(index);
        onChanged();
      } else {
        endpointsBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public com.google.cloud.servicedirectory.v1.Endpoint.Builder getEndpointsBuilder(int index) {
      return getEndpointsFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public com.google.cloud.servicedirectory.v1.EndpointOrBuilder getEndpointsOrBuilder(int index) {
      if (endpointsBuilder_ == null) {
        return endpoints_.get(index);
      } else {
        return endpointsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public java.util.List<? extends com.google.cloud.servicedirectory.v1.EndpointOrBuilder>
        getEndpointsOrBuilderList() {
      if (endpointsBuilder_ != null) {
        return endpointsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(endpoints_);
      }
    }
    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public com.google.cloud.servicedirectory.v1.Endpoint.Builder addEndpointsBuilder() {
      return getEndpointsFieldBuilder()
          .addBuilder(com.google.cloud.servicedirectory.v1.Endpoint.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public com.google.cloud.servicedirectory.v1.Endpoint.Builder addEndpointsBuilder(int index) {
      return getEndpointsFieldBuilder()
          .addBuilder(index, com.google.cloud.servicedirectory.v1.Endpoint.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * Output only. Endpoints associated with this service. Returned on
     * LookupService.Resolve. Control plane clients should use
     * RegistrationService.ListEndpoints.
     * </pre>
     *
     * <code>
     * repeated .google.cloud.servicedirectory.v1.Endpoint endpoints = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
     * </code>
     */
    public java.util.List<com.google.cloud.servicedirectory.v1.Endpoint.Builder>
        getEndpointsBuilderList() {
      return getEndpointsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.servicedirectory.v1.Endpoint,
            com.google.cloud.servicedirectory.v1.Endpoint.Builder,
            com.google.cloud.servicedirectory.v1.EndpointOrBuilder>
        getEndpointsFieldBuilder() {
      if (endpointsBuilder_ == null) {
        endpointsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.cloud.servicedirectory.v1.Endpoint,
                com.google.cloud.servicedirectory.v1.Endpoint.Builder,
                com.google.cloud.servicedirectory.v1.EndpointOrBuilder>(
                endpoints_, ((bitField0_ & 0x00000002) != 0), getParentForChildren(), isClean());
        endpoints_ = null;
      }
      return endpointsBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.servicedirectory.v1.Service)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.servicedirectory.v1.Service)
  private static final com.google.cloud.servicedirectory.v1.Service DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.servicedirectory.v1.Service();
  }

  public static com.google.cloud.servicedirectory.v1.Service getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Service> PARSER =
      new com.google.protobuf.AbstractParser<Service>() {
        @java.lang.Override
        public Service parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Service(input, extensionRegistry);
        }
      };

  public static com.google.protobuf.Parser<Service> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Service> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.servicedirectory.v1.Service getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
